"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("../styles");

var _IntlProviderWithArrows = _interopRequireDefault(require("../IntlProviderWithArrows"));

var _utils = require("../IntlProviderWithArrows/utils");

var _theme = _interopRequireDefault(require("../theme"));

var _CssBaseline = _interopRequireDefault(require("../CssBaseline"));

var _locale = require("../locale");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var fontFamilies = {
  designer: ['Segoe UI', 'San Francisco', 'Arial', 'sans-serif'],
  default: ['Lato', 'Arial', 'sans-serif'],
  ja: ['メイリオ', 'Meiryo', 'ヒラギノ角ゴ ProN', 'Hiragino Kaku Gothic ProN', 'ＭＳ ゴシック', 'MS Gothic', 'sans-serif'],
  zh: ['Microsoft YaHei', 'PingFang SC', 'JhengHei UI', 'MS Gothic', 'sans-serif']
};

var _ref2 = /*#__PURE__*/_react.default.createElement(_CssBaseline.default, null);

var AyxAppWrapper = function AyxAppWrapper(_ref) {
  var language = _ref.language,
      locale = _ref.locale,
      messages = _ref.messages,
      disableCssBaseline = _ref.disableCssBaseline,
      productTheme = _ref.theme,
      children = _ref.children,
      padMessagesProps = _ref.padMessagesProps,
      paletteType = _ref.paletteType;
  var alteryxLanguageCode = typeof window !== 'undefined' && window.Alteryx && window.Alteryx.AlteryxLanguageCode;
  var determinedLocale = (0, _react.useMemo)(function () {
    // priority should be locale > window detection > 'en';
    if (typeof locale !== 'undefined') {
      return locale;
    }

    if (typeof window !== 'undefined') {
      return alteryxLanguageCode || // Installed Designer language (most preferred, if available)
      window.navigator.userLanguage || // for IE
      window.navigator.languages[0] || // preferred over .language
      window.navigator.language || // final fallback
      'en';
    }

    return 'en';
  }, [locale, alteryxLanguageCode]);
  var trimmedDeterminedLocale = determinedLocale.length > 2 && determinedLocale.includes('-') ? determinedLocale.split('-')[0] : determinedLocale;
  var isDesignerCef = (0, _react.useMemo)(function () {
    return alteryxLanguageCode ? 'designer' : 'default';
  }, [alteryxLanguageCode]);
  var messagesLanguage = typeof language !== 'undefined' ? language : trimmedDeterminedLocale; // our messages still need to work with en-US passing in, so we need to trim the region

  var trimmedMessagesLanguage = messagesLanguage.length > 2 && messagesLanguage.includes('-') ? messagesLanguage.split('-')[0] : messagesLanguage; // User provided message object, not UI-Core messages.

  var userMessages = (0, _react.useMemo)(function () {
    var localeFallback = determinedLocale === 'xx' || determinedLocale === 'arrows' || determinedLocale === 'stars' ? 'en' : determinedLocale;
    return messages[language] || messages[trimmedMessagesLanguage] || messages[localeFallback] || messages[trimmedDeterminedLocale] || messages.en;
  }, [language, messages, determinedLocale, trimmedDeterminedLocale, trimmedMessagesLanguage]);
  var fontFamily = (0, _react.useMemo)(function () {
    // Language will win out over locale in case it is Japanese or Chinese
    if (typeof language !== 'undefined') {
      if (trimmedMessagesLanguage === 'ja') {
        return fontFamilies[trimmedMessagesLanguage].join(',');
      }

      if (trimmedMessagesLanguage === 'zh') {
        return fontFamilies[trimmedMessagesLanguage].join(',');
      }
    }

    var families = trimmedDeterminedLocale === 'ja' || trimmedDeterminedLocale === 'zh' ? fontFamilies[trimmedDeterminedLocale].join(',') : fontFamilies[isDesignerCef].join(',');
    return families;
  }, [language, trimmedDeterminedLocale, trimmedMessagesLanguage, isDesignerCef]); // UI-Core default messages for our components

  var uiCoreMessages = {
    en: _locale.en,
    de: _locale.de,
    es: _locale.es,
    fr: _locale.fr,
    it: _locale.it,
    ja: _locale.ja,
    pt: _locale.pt,
    zh: _locale.zh
  };
  var defaultTranslations = determinedLocale === 'xx' || determinedLocale === 'arrows' || determinedLocale === 'stars' ? (0, _utils.padMessages)(uiCoreMessages.en, padMessagesProps, determinedLocale === 'stars') : uiCoreMessages[trimmedMessagesLanguage] || _locale.en; // includes theme and overrides)

  var finalTheme = (0, _react.useMemo)(function () {
    return (0, _theme.default)(productTheme, fontFamily, paletteType, defaultTranslations);
  }, [productTheme, fontFamily, paletteType, defaultTranslations]);
  return /*#__PURE__*/_react.default.createElement(_styles.ThemeProvider, {
    theme: finalTheme
  }, disableCssBaseline ? null : _ref2, /*#__PURE__*/_react.default.createElement(_IntlProviderWithArrows.default, {
    locale: determinedLocale,
    messages: userMessages,
    padMessagesProps: padMessagesProps
  }, children));
};

AyxAppWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  disableCssBaseline: _propTypes.default.bool,
  language: _propTypes.default.string,
  locale: _propTypes.default.string,
  messages: _propTypes.default.objectOf(_propTypes.default.objectOf(_propTypes.default.string)),
  paletteType: _propTypes.default.string,
  theme: _propTypes.default.oneOfType([_propTypes.default.shape({}), _propTypes.default.func])
} : {};
AyxAppWrapper.defaultProps = {
  disableCssBaseline: false,
  language: undefined,
  locale: undefined,
  messages: {},
  paletteType: 'light',
  theme: {}
};
var _default = AyxAppWrapper;
exports.default = _default;