"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createFilterOptions", {
  enumerable: true,
  get: function get() {
    return _Autocomplete.createFilterOptions;
  }
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Autocomplete = _interopRequireWildcard(require("@material-ui/lab/Autocomplete"));

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Autocomplete = function Autocomplete(props) {
  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      prevIndex = _useState2[0],
      setPrevIndex = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      focused = _useState4[0],
      setFocused = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      direction = _useState6[0],
      setDirection = _useState6[1];

  var ListboxComponent = props.ListboxComponent,
      disableListWrap = props.disableListWrap,
      ListboxProps = props.ListboxProps,
      onHighlightChange = props.onHighlightChange,
      rest = (0, _objectWithoutProperties2.default)(props, ["ListboxComponent", "disableListWrap", "ListboxProps", "onHighlightChange"]);

  var handleOnHighlightChange = function handleOnHighlightChange(e, value, reason) {
    var focusedEl = document.querySelector('[data-focus="true"]');

    if (e && e.key) {
      setDirection(e.key);
    }

    if (focusedEl !== null) setFocused(focusedEl);
    if (typeof onHighlightChange === 'function') onHighlightChange(e, value, reason);
  };

  (0, _react.useEffect)(function () {
    if (focused !== null) {
      var index = parseInt(focused.dataset.optionIndex, 10);

      if (direction === 'ArrowDown' || direction === 'ArrowUp') {
        setPrevIndex(index);
      }
    }
  }, [focused, direction]);
  return ListboxComponent.muiName === 'VirtualizedList' && (disableListWrap === false || disableListWrap === undefined) ? /*#__PURE__*/_react.default.createElement(_Autocomplete.default, (0, _extends2.default)({}, rest, {
    ListboxComponent: ListboxComponent,
    ListboxProps: (0, _extends2.default)({}, ListboxProps, {
      prevIndex: prevIndex,
      direction: direction
    }),
    onHighlightChange: handleOnHighlightChange
  })) : /*#__PURE__*/_react.default.createElement(_Autocomplete.default, props);
};

Autocomplete.propTypes = process.env.NODE_ENV !== "production" ? {
  disableListWrap: _propTypes.default.bool,
  ListboxComponent: _propTypes.default.elementType,
  ListboxProps: _propTypes.default.objectOf(_propTypes.default.any),
  onHighlightChange: _propTypes.default.func
} : {};
Autocomplete.defaultProps = {
  disableListWrap: undefined,
  ListboxComponent: 'ul',
  ListboxProps: {
    prevIndex: null,
    direction: ''
  },
  onHighlightChange: undefined
};

var _default = (0, _utils.dataUICMaker)(Autocomplete, 'Autocomplete');

exports.default = _default;