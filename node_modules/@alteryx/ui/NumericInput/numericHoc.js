"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var utils = _interopRequireWildcard(require("./utils"));

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var numericHoc = function numericHoc(WrappedComponent) {
  var Numeric = /*#__PURE__*/function (_Component) {
    (0, _inherits2.default)(Numeric, _Component);

    var _super = _createSuper(Numeric);

    function Numeric() {
      var _this;

      (0, _classCallCheck2.default)(this, Numeric);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.interval = [];
      _this.timeouts = [];
      _this.state = {};

      _this.numericBlur = function (event) {
        var _this$props = _this.props,
            value = _this$props.value,
            max = _this$props.max,
            min = _this$props.min,
            onBlur = _this$props.onBlur;
        var normalized = utils.normalize(value);
        /*
          Return minimum possible, if value is't within boundaries
        */

        if (!utils.validate(normalized, max, min) || !utils.isEmptyAllowed(value, min)) {
          _this.numericOnChange(min);
        } else {
          /*
            Otherwise return origin value
          */
          _this.numericOnChange(value);
        } // Anyhow fire onBLur


        onBlur(event);
      };

      _this.validator = function (val) {
        var _this$props2 = _this.props,
            max = _this$props2.max,
            min = _this$props2.min,
            decimal = _this$props2.decimal;
        var value = decimal ? utils.trimDecimal(val, max, decimal) : val;

        if (!utils.validateDenormalized(value, max, min, decimal)) {
          return false;
        }

        var normalized = utils.normalize(value);

        if (!utils.validate(normalized, max, _this.currentMin)) {
          return false;
        }

        return true;
      };

      _this.numericChange = function (event) {
        var target = event.target;
        var _this$props3 = _this.props,
            max = _this$props3.max,
            decimal = _this$props3.decimal;
        var value = utils.trimDecimal(target.value, max, decimal);
        var normalized = utils.normalize(value);
        event.preventDefault();

        if (_this.validator(value)) {
          /**
           * Update denormalized and normalized values
           * if normalized is within in ranges update,
           * then fire callback
           */
          _this.setState(function (state, _ref) {
            var onChange = _ref.onChange;
            onChange(value);
            return {
              normalized: normalized,
              value: value
            };
          });
        }
      };

      _this.numericStart = function () {
        var inc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return function (event) {
          var isMouseTriggered = typeof inc === 'boolean';
          var isIncrement = isMouseTriggered ? inc : utils.getIncrementFromKeyCode(event);

          if (typeof isIncrement === 'boolean') {
            event.preventDefault();

            if (_this.isEnabled) {
              // if user accidentally trigger spinner,
              // firstly increment value once.
              _this.iterateValue(isIncrement); // if user accidentally trigger we prevent accidentally
              // triggering within timeouts.


              var timeoutId = setTimeout(function () {
                if (isMouseTriggered) {
                  document.addEventListener('mouseup', _this.numericStop);
                }

                clearInterval(_this.interval);
                _this.interval = setInterval(function () {
                  _this.iterateValue(isIncrement);
                }, isMouseTriggered ? _constants.SPINNER_MOUSE_INTERVAL : _constants.SPINNER_KEYBOARD_INTERVAL);
              }, _constants.SPINNER_CHANGE_DELAY);

              _this.timeouts.push(timeoutId);
            }
          }
        };
      };

      _this.numericOnChange = function (value) {
        var _this$props4 = _this.props,
            decimal = _this$props4.decimal,
            fixedDecimal = _this$props4.fixedDecimal,
            max = _this$props4.max,
            onChange = _this$props4.onChange;
        var finalValue = utils.print(value, max, decimal, fixedDecimal);
        onChange(utils.denormalize(finalValue));
      };

      _this.numericStop = function () {
        _this.clearTimeouts();

        clearInterval(_this.interval);
        _this.interval = null;
        document.removeEventListener('mouseup', _this.numericStop);
      };

      _this.clearTimeouts = function () {
        _this.timeouts.forEach(function (interval) {
          return clearInterval(interval);
        });

        _this.timeouts = [];
      };

      _this.iterateValue = function (isIncrement) {
        var _this$props5 = _this.props,
            decimal = _this$props5.decimal,
            max = _this$props5.max,
            min = _this$props5.min,
            value = _this$props5.value,
            step = _this$props5.step;
        var direction = isIncrement ? 1 : -1;
        var incrementer = direction * parseFloat(step);
        var normalized = utils.add(value, incrementer);
        /*
          Return new incremented value if it within boundaries
         */

        if (utils.validate(normalized, max, min)) {
          var denormalized = utils.denormalize(normalized); // pass in case denormalize value is correct

          if (utils.validateDenormalized(denormalized, max, min, decimal)) {
            _this.numericOnChange(normalized);
          }

          return;
        }
        /*
          If typed value is empty, start iteration from minimum possible value
        */


        if (utils.isValueEmpty(value)) {
          _this.numericOnChange(min);

          return;
        }
        /*
          Otherwise keep value unchanged
         */


        _this.numericOnChange(value);
      };

      return _this;
    }

    (0, _createClass2.default)(Numeric, [{
      key: "isEnabled",
      get: function get() {
        var _this$props6 = this.props,
            disabled = _this$props6.disabled,
            readOnly = _this$props6.readOnly;
        return !disabled && !readOnly;
      }
    }, {
      key: "currentMin",
      get: function get() {
        var min = this.props.min;

        if (min > 0) {
          return 0;
        }

        return min;
      }
      /**
       * Bringing value to the proper format on finish if needed
       */

    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/_react.default.createElement(WrappedComponent, (0, _extends2.default)({
          numericBlur: this.numericBlur,
          numericChange: this.numericChange,
          numericStart: this.numericStart,
          numericStop: this.numericStop,
          validator: this.validator
        }, this.props));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(_ref2, state) {
        var decimal = _ref2.decimal,
            fixedDecimal = _ref2.fixedDecimal,
            value = _ref2.value;
        var normalized = utils.normalize(value);
        var isDifferent = utils.compare(normalized, state.normalized);

        if (isDifferent || decimal !== state.decimal || fixedDecimal !== state.fixedDecimal) {
          return {
            normalized: normalized,
            fixedDecimal: fixedDecimal,
            decimal: decimal
          };
        }

        return null;
      }
    }]);
    return Numeric;
  }(_react.Component);

  Numeric.displayName = "numericHoc(".concat(WrappedComponent.displayName || WrappedComponent.name, ")");
  return Numeric;
};

var _default = numericHoc;
exports.default = _default;