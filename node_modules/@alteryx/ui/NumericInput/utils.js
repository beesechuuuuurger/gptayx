"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIncrementFromKeyCode = exports.print = exports.validateDenormalized = exports.allowIntermediateValue = exports.trimDecimal = exports.formatFloat = exports.extendDecimal = exports.isEmptyAllowed = exports.isValueEmpty = exports.validate = exports.denormalize = exports.add = exports.normalize = exports.compare = void 0;

var _bignumber = require("bignumber.js");

var _lodash = require("lodash");

var _keycodeJs = require("keycode-js");

var _constants = require("./constants");

var compare = function compare(first, second) {
  return (0, _bignumber.BigNumber)(first).comparedTo(second);
};

exports.compare = compare;

var normalize = function normalize(value) {
  var normalized = (0, _bignumber.BigNumber)(value);
  return !normalized.isNaN() ? normalized : (0, _bignumber.BigNumber)(0);
};

exports.normalize = normalize;

var add = function add(first, second) {
  return normalize(first).plus(normalize(second)).toString();
};

exports.add = add;

var denormalize = function denormalize(value) {
  return value.toString();
};
/**
 * Validating process is:
 * 1. Use given custom max\min
 * 2, If custom ranges not given, use system max\min
 * 3. Return false if value placed in given range
 * @param value - Long for Int64, JS Number for the rest
 * @param max
 * @param min
 * @returns {boolean}
 */


exports.denormalize = denormalize;

var validate = function validate(value, max, min) {
  if (!(0, _lodash.isNil)(max) || !(0, _lodash.isNil)(min)) {
    return !(compare(value, max) === 1 || compare(value, min) === -1);
  }

  return true;
};

exports.validate = validate;

var isValueEmpty = function isValueEmpty(value) {
  return value === '' || value === '0';
};
/**
 * Forbid empty value if minimum specified as 0
 * @param value
 * @param min
 * @returns {boolean}
 */


exports.isValueEmpty = isValueEmpty;

var isEmptyAllowed = function isEmptyAllowed(value, min) {
  return !(isValueEmpty(value) && min === 0);
};
/**
 * Get left and right sizes from either strLength and decimal
 * @param max
 * @param decimal
 * @returns {{left: number, right: *}}
 */


exports.isEmptyAllowed = isEmptyAllowed;

var getLeftRight = function getLeftRight(max, decimal) {
  return {
    left: max.toString().length,
    right: decimal
  };
};

var extendDecimal = function extendDecimal(value, max, decimal) {
  var _getLeftRight = getLeftRight(max, decimal),
      right = _getLeftRight.right;

  var pointPos = value.indexOf('.');
  var pointNeeded = pointPos > 0 ? 0 : 1;
  var nullNeeded = pointPos > 0 ? right - (value.length - pointPos) + 1 : right;
  return "".concat(value).concat((0, _lodash.repeat)('.', pointNeeded)).concat((0, _lodash.repeat)('0', nullNeeded));
};

exports.extendDecimal = extendDecimal;

var formatFloat = function formatFloat(value, max, decimal) {
  var _getLeftRight2 = getLeftRight(max, decimal),
      left = _getLeftRight2.left,
      right = _getLeftRight2.right;

  var matchPattern = "(-{0,1}[0-9]{1,".concat(left, "})([0-9.]{0,").concat(right + 1, "}).*");
  var matchReg = new RegExp(matchPattern);
  return value.replace(matchReg, '$1|$2').replace(/\|$/gm, '').replace('.', '').replace('|', '.');
};

exports.formatFloat = formatFloat;

var trimDecimal = function trimDecimal(initialValue, max, decimal) {
  /*
    Trim all non digit chars
   */
  var value = initialValue.replace(/[^0-9.-]+/gm, '');
  /*
    Trim decimal value
   */

  if (decimal) {
    return formatFloat(value, max, decimal);
  }
  /*
    Trim integer value
   */


  return value.replace(/\.[^.-]+$/gm, '');
};

exports.trimDecimal = trimDecimal;

var allowIntermediateValue = function allowIntermediateValue(value) {
  return _constants.INTERMEDIATE_FORMATS.includes(value);
};
/**
 * Check is denormalized value correct
 * @param value - String
 * @param max
 * @param min
 * @param decimal
 * @returns {*|boolean}
 */


exports.allowIntermediateValue = allowIntermediateValue;

var validateDenormalized = function validateDenormalized(value, max, min, decimal) {
  var format = decimal ? _constants.FORMAT_FLOAT : _constants.FORMAT_INTEGER;
  /*
    Although forbidding non numeric formats, pass intermediate values
   */

  if (!(format.test(value) || allowIntermediateValue(value))) {
    return false;
  }
  /*
    Disallow minus in positive numbers, including zero
   */


  if (min >= 0 && !_constants.FORMAT_POSITIVE.test(value)) {
    return false;
  }
  /*
    Disallow non-format decimal values
   */


  if (max && decimal) {
    var _getLeftRight3 = getLeftRight(max, decimal),
        left = _getLeftRight3.left,
        right = _getLeftRight3.right;

    var formattedDecimalValue = extendDecimal(value, max, decimal);
    var formatPattern = "^-{0,1}[0-9]{0,".concat(left, "}.[0-9]{0,").concat(right, "}$");
    var formatReg = new RegExp(formatPattern);
    return formatReg.test(formattedDecimalValue);
  }

  return true;
};
/**
 * Check is denormalized value
 * @param value
 * @param max
 * @param decimal
 * @param fixedDecimal
 * @returns {string}
 */


exports.validateDenormalized = validateDenormalized;

var print = function print(value, max, decimal, fixedDecimal) {
  /*
    Printing fixed decimal values
   */
  if (value && max && decimal && fixedDecimal) {
    var formattedFloat = formatFloat(value, max, decimal);
    return extendDecimal(formattedFloat, max, decimal);
  }
  /*
    Printing decimal values
   */


  if (value && decimal) {
    return (0, _bignumber.BigNumber)(value).toString();
  }
  /*
    Printing integer values if it's given
   */


  return value ? normalize(value).toString() : value;
};

exports.print = print;

var getIncrementFromKeyCode = function getIncrementFromKeyCode(_ref) {
  var keyCode = _ref.keyCode;
  if (!_constants.CONTROL_KEYS.includes(keyCode)) return null;
  return keyCode === _keycodeJs.KEY_UP;
};

exports.getIncrementFromKeyCode = getIncrementFromKeyCode;