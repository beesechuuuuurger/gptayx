"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.propTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _useFormControl = _interopRequireDefault(require("../useFormControl"));

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _formControlState = _interopRequireDefault(require("@material-ui/core/FormControl/formControlState"));

var _NumericInput = _interopRequireDefault(require("./NumericInput"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var propTypes = {
  /**
   * Value witch falls in range of the given typeTYPES
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Num of symbols after fixed
   */
  decimal: _propTypes.default.number,

  /**
   * Enable fixed decimal
   */
  fixedDecimal: _propTypes.default.bool,

  /**
   * The minimum possible value for numeric TextField
   */
  min: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * The maximum possible value for numeric TextField
   */
  max: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Iteration step
   */
  step: _propTypes.default.number,

  /**
   * This property helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: _propTypes.default.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: _propTypes.default.bool,

  /**
   * The default value of the `input` element.
   */
  decrementButtonText: _propTypes.default.string,

  /**
   * Properties applied to the [`aria-label`] of the decrementButton on NumericSpinner component.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * If `true`, the label will be displayed in an error state.
   */
  endAdornment: _propTypes.default.node,

  /**
   * Places an InputAdornmentLabel at the end of the input.
   */
  error: _propTypes.default.bool,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: _propTypes.default.bool,

  /**
   * The id of the `input` element.
   * Use this property to make `label` accessible for screen readers.
   */
  id: _propTypes.default.string,

  /**
   * Properties applied to the [`InputLabel`](/https://material-ui.com/api/input-label/) element.
   */
  incrementButtonText: _propTypes.default.string,

  /**
   * Properties applied to the [`aria-label`] of the incrementButton on NumericSpinner component.
   */
  InputLabelProps: _propTypes.default.objectOf(_propTypes.default.any),

  /**
   * Properties applied to the [Input](https://material-ui.com/api/input/) element
   */
  InputProps: _propTypes.default.objectOf(_propTypes.default.any),

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: _propTypes.default.objectOf(_propTypes.default.any),

  /**
   * This property can be used to pass a ref callback to the `input` element.
   */
  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * The label content.
   */
  label: _propTypes.default.node,

  /**
   * If `true`, a textarea element will be rendered instead of an input.
   */
  multiline: _propTypes.default.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,

  /**
   * Callback fired when the input is blurred.
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when the value is changed.
   */
  onChange: _propTypes.default.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback fired when the input is focused.
   */
  placeholder: _propTypes.default.string,

  /**
   * If `true`, the label is displayed as required and the `input` element` will be required.
   */
  readOnly: _propTypes.default.bool,

  /**
   * If `true`, the input will only display a value and wont allow values to change.
   */
  required: _propTypes.default.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  startAdornment: _propTypes.default.node,

  /**
   * Places an InputAdornmentLabel at the beginning of the input.
   */
  type: _propTypes.default.string,
  dataUIC: _propTypes.default.string
};
exports.propTypes = propTypes;
var defaultProps = {
  autoComplete: undefined,
  autoFocus: false,
  dataUIC: undefined,
  decimal: 0,
  defaultValue: '',
  disabled: undefined,
  error: undefined,
  fixedDecimal: false,
  fullWidth: undefined,
  id: undefined,
  InputLabelProps: {},
  InputProps: {},
  inputProps: {},
  inputRef: undefined,
  label: undefined,
  max: Number.MAX_SAFE_INTEGER,
  min: Number.MIN_SAFE_INTEGER,
  multiline: false,
  name: undefined,
  onBlur: _lodash.noop,
  onChange: _lodash.noop,
  placeholder: undefined,
  readOnly: undefined,
  required: undefined,
  rows: undefined,
  rowsMax: undefined,
  step: 1,
  type: 'text'
};
var useStyles = (0, _makeStyles.default)(function () {
  return {
    dataUICWrapperChild: {
      width: '100%'
    }
  };
});

var styles = function styles(_ref) {
  var palette = _ref.palette;
  return {
    root: {},
    incrementButton: {
      borderTopLeftRadius: 4,
      borderTopRightRadius: 4,
      padding: 0,
      borderRadius: 0,
      display: 'flex',
      alignItems: 'center',
      cursor: 'pointer',
      transition: '0.1s background',
      width: 20,
      height: 11,
      marginBottom: 0,
      textAlign: 'center',
      '& svg': {
        color: palette.blueGrey[500],
        marginTop: 0
      },
      '& span': {
        height: 11
      }
    },
    decrementButton: {
      borderBottomLeftRadius: 4,
      borderBottomRightRadius: 4,
      padding: 0,
      borderRadius: 0,
      display: 'flex',
      alignItems: 'center',
      cursor: 'pointer',
      transition: '0.1s background',
      width: 20,
      height: 11,
      marginTop: 2,
      textAlign: 'center',
      '& svg': {
        color: palette.blueGrey[500],
        marginTop: 0
      },
      '& span': {
        height: 11
      }
    },
    incrementIcon: {
      display: 'block'
    },
    decrementIcon: {
      display: 'block'
    }
  };
};

function NumericInputWrapper(props) {
  var autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      className = props.className,
      decimal = props.decimal,
      decrementButtonText = props.decrementButtonText,
      defaultValue = props.defaultValue,
      fixedDecimal = props.fixedDecimal,
      fullWidth = props.fullWidth,
      id = props.id,
      incrementButtonText = props.incrementButtonText,
      InputProps = props.InputProps,
      inputProps = props.inputProps,
      inputRef = props.inputRef,
      max = props.max,
      multiline = props.multiline,
      min = props.min,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      rows = props.rows,
      rowsMax = props.rowsMax,
      step = props.step,
      type = props.type,
      value = props.value,
      endAdornment = props.endAdornment,
      startAdornment = props.startAdornment,
      dataUIC = props['data-uic'];
  var classes = useStyles();
  var propsClasses = props.classes;

  var _useState = (0, _react.useState)(defaultValue),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      stateValue = _useState2[0],
      setValue = _useState2[1];

  var isControlled = value !== undefined;
  var muiFormControl = (0, _useFormControl.default)();
  var fcs = (0, _formControlState.default)({
    props: props,
    muiFormControl: muiFormControl,
    states: ['disabled', 'error']
  });

  var onChangeWithState = function onChangeWithState(newValue) {
    if (isControlled === false) {
      setValue(newValue);
    }

    if (onChange) {
      onChange(newValue);
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    "data-uic": dataUIC
  }, /*#__PURE__*/_react.default.createElement(_NumericInput.default, (0, _extends2.default)({
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    classes: propsClasses,
    className: (0, _clsx2.default)(propsClasses.root, className, (0, _defineProperty2.default)({}, classes.dataUICWrapperChild, typeof muiFormControl !== 'undefined')),
    decimal: decimal,
    decrementButtonText: decrementButtonText,
    disabled: fcs.disabled,
    endAdornment: endAdornment,
    error: fcs.error,
    fixedDecimal: fixedDecimal,
    fullWidth: fullWidth,
    id: id,
    incrementButtonText: incrementButtonText,
    inputProps: inputProps,
    inputRef: inputRef,
    max: max,
    min: min,
    multiline: multiline,
    name: name,
    onBlur: onBlur,
    onChange: onChangeWithState,
    onFocus: onFocus,
    placeholder: placeholder,
    readOnly: readOnly,
    rows: rows,
    rowsMax: rowsMax,
    startAdornment: startAdornment,
    step: step,
    type: type,
    value: isControlled ? value : stateValue
  }, InputProps)));
}

NumericInputWrapper.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
NumericInputWrapper.defaultProps = defaultProps;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiNumericInput'
})(NumericInputWrapper);

exports.default = _default;