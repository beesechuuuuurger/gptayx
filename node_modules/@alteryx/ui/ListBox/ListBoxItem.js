"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _flow = _interopRequireDefault(require("lodash/flow"));

var _Checkbox = _interopRequireDefault(require("../Checkbox"));

var _Grid = _interopRequireDefault(require("../Grid"));

var _ListItem = _interopRequireDefault(require("../ListItem"));

var _RootRef = _interopRequireDefault(require("../RootRef"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _icons = require("@alteryx/icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var propTypes = process.env.NODE_ENV !== "production" ? {
  disabled: _propTypes.default.bool,
  displayName: _propTypes.default.node,
  divider: _propTypes.default.bool,
  index: _propTypes.default.number.isRequired,
  itemRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  ListItemTextComponent: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.element, _propTypes.default.func]).isRequired,
  name: _propTypes.default.node.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onKeyDown: _propTypes.default.func,
  selected: _propTypes.default.bool,
  style: _propTypes.default.objectOf(_propTypes.default.any),
  tooltip: _propTypes.default.string
} : {};
var defaultProps = {
  disabled: false,
  displayName: null,
  divider: false,
  itemRef: function itemRef() {},
  onKeyDown: function onKeyDown() {},
  selected: false,
  style: {},
  tooltip: ''
};
var useStyles = (0, _makeStyles.default)(function (_ref) {
  var spacing = _ref.spacing;
  return {
    itemTextContainer: {
      flexWrap: 'nowrap'
    },
    itemTextContent: {
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    },
    item: {
      borderRadius: function borderRadius(props) {
        return props.divider ? 0 : spacing(1);
      }
    }
  };
});

var _ref3 = /*#__PURE__*/_react.default.createElement(_icons.HelpCircle, {
  size: "xsmall"
});

function ListBoxItem(_ref2) {
  var index = _ref2.index,
      itemRef = _ref2.itemRef,
      name = _ref2.name,
      selected = _ref2.selected,
      classes = _ref2.classes,
      disabled = _ref2.disabled,
      ListItemText = _ref2.ListItemTextComponent,
      onChange = _ref2.onChange,
      onKeyDown = _ref2.onKeyDown,
      style = _ref2.style,
      tooltip = _ref2.tooltip,
      displayName = _ref2.displayName,
      divider = _ref2.divider;
  var onClick = disabled ? undefined : function (event) {
    return onChange(event, !selected);
  };
  var hasToolTip = Boolean(tooltip);
  var baseClasses = useStyles({
    divider: divider
  });
  return /*#__PURE__*/_react.default.createElement(_RootRef.default, {
    rootRef: itemRef
  }, /*#__PURE__*/_react.default.createElement(_ListItem.default, {
    button: true,
    classes: {
      root: classes.item
    },
    className: baseClasses.item,
    component: "li",
    "data-test": "listbox-item-".concat(index),
    dense: true,
    disabled: disabled,
    disableGutters: true,
    divider: divider,
    onClick: onClick,
    onKeyDown: onKeyDown,
    style: style
  }, /*#__PURE__*/_react.default.createElement(_Checkbox.default, {
    checked: selected,
    classes: {
      root: classes.checkbox
    },
    disabled: disabled,
    tabIndex: -1
  }), /*#__PURE__*/_react.default.createElement(ListItemText, {
    classes: {
      root: classes.itemText
    },
    disableTypography: true,
    primary: /*#__PURE__*/_react.default.createElement(_Grid.default, {
      className: baseClasses.itemTextContainer,
      container: true
    }, /*#__PURE__*/_react.default.createElement(_Grid.default, {
      className: baseClasses.itemTextContent,
      item: true,
      title: name
    }, displayName || name), hasToolTip && /*#__PURE__*/_react.default.createElement(_Grid.default, {
      item: true
    }, /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      arrow: true,
      className: classes.icon,
      title: tooltip
    }, _ref3)))
  })));
}

ListBoxItem.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
ListBoxItem.defaultProps = defaultProps;

var _default = (0, _flow.default)([_react.memo])(ListBoxItem);

exports.default = _default;